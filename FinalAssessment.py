# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1saRbw_u9dMaFmnb2PWkD4i5moIiGN8Nq
"""

import pandas as pd
import numpy as np

data=pd.read_csv('/content/train_LZdllcl.csv')

data['education']=data['education'].fillna(data['education'].mode()[0])
data['previous_year_rating']=data['previous_year_rating'].fillna(data['previous_year_rating'].mean())
#check for null
data.isnull().sum()

data=pd.get_dummies(data,columns=['department','gender','education','recruitment_channel'])
data.head()

X=data.drop(columns=['employee_id', 'is_promoted','region'])
y=data['is_promoted']

# Split the data into training and testing sets
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Initialize and train the model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

# Make predictions
y_pred = model.predict(X_test_scaled)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

print(f'Accuracy: {accuracy:.2f}')
print('Classification Report:')
print(report)

from sklearn.metrics import f1_score
y_pred = model.predict(X_test)
print('F1 Score:', f1_score(y_test,y_pred))

data2=pd.read_csv('/content/test_2umaH9m.csv')
data2.head()
data2.isnull().sum()

data2['education']=data2['education'].fillna(data2['education'].mode()[0])
data2['previous_year_rating']=data2['previous_year_rating'].fillna(data2['previous_year_rating'].mean())
data.isnull().sum()

data2=pd.get_dummies(data2,columns=['department','gender','education','recruitment_channel'])
data2.head()

X1=data2.drop(columns=['employee_id','region'])
sc2=StandardScaler()
test=sc2.fit_transform(X1)

result=model.predict(test)
len(result),result

sample=pd.read_csv('/content/sample_submission_M0L0uXE.csv')
sample['is_promoted']=result
sample.to_csv('submission2.csv',index=False)

